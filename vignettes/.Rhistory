check_kkt(X, y, b, lambda.1se)
}
#We can observe that almost all coefficients get a false result for KKT violation.
install.packages("Matrix")
install.packages("Matrix")
library(Matrix)
install.packages("glmnet",repos = "http://cran.us.r-project.org")
library(Matrix)
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
#install.packages("glmnet",repos = "http://cran.us.r-project.org")
install.packages("Matrix")
library(Matrix)
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
#install.packages("glmnet",repos = "http://cran.us.r-project.org")
install.packages("Matrix")
library(Matrix)
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
install.packages("Matrix")
set.seed(365)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
#Check which variables violate KKT condition
#x:A numeric data matrix.
#y: Response vector.
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
fit <- cv.glmnet(X,y,alpha=1)
lambda.1se <- fit$lambda.1se
b <- fit$glmnet.fit$beta[, which(fit$lambda == fit$lambda.1se)]
print(b)
check_kkt(X, y, b, lambda.1se)
}
#We can observe that almost all coefficients get a false result for KKT violation.
#install.packages("glmnet",repos = "http://cran.us.r-project.org")
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
library(devtools)
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
library(glmnet)
library(Matrix)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
library(Matrix)
if(!require(somepackage)){
install.packages("Matrix")
library(Matrix)
}
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
library(glmnet)
library(glmnet)
#if(!require(somepackage)){
# install.packages("Matrix",repos = "http://cran.us.r-project.org")
# library(Matrix)
#}
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
#install.packages("Matrix",repos = "http://cran.us.r-project.org")
library(Matrix)
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
#library(Matrix)
library(glmnet)
# Check current KKT conditions for regression vector.
#Arguments:
# X: A numeric data matrix.
# y: Response vector.
# b: Current value of the regression vector.
# lambda: The penalty term.
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
# Return a vector indicating where the KKT conditions have been violated by the variables that are currently zero.
(b == 0) & (abs(s) >= 1)
}
set.seed(365)
n <- 1000L
p <- 5000L
X <- matrix(rnorm(n * p), ncol = p)
beta <- c(seq(1, 0.1, length.out=(10L)), rep(0, p - 10L))
y <- X %*% beta + rnorm(n = n, sd = 0.15)
#Check which variables violate KKT condition
#x:A numeric data matrix.
#y: Response vector.
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
fit <- cv.glmnet(X,y,alpha=1)
lambda.1se <- fit$lambda.1se
b <- fit$glmnet.fit$beta[, which(fit$lambda == fit$lambda.1se)]
print(b)
check_kkt(X, y, b, lambda.1se)
}
#We can observe that almost all coefficients get a false result for KKT violation.
set.seed(6909)
#write out the Epanechnikov kernel function
kernel_epan <- function(x) {
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
return(val)
}
kernel_epan(x)
set.seed(6909)
#write out the Epanechnikov kernel function
kernel_epan <- function(x) {
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
return(val)
}
#write out the Epanechnikov density function
i = 1
h = 1
kern_density <- function(x, h, x_new){
dst_est <- numeric()
for (i in 1:length(x_new)){
dst_est[i] <- mean(kernel_epan((x_new[i]-x)/h))/h
}
dst_est
}
#visualize different bandwidths
x <- rnorm(1000, 0, 1)
x_new <- sort(rnorm(50, 0, 1))
h = c(0.1, 0.5, 1, 2, 3)
for (i in h){
plot(x_new, kern_density(x,i,x.new), ylab = "Density", main = "Kernal density estimation", type = "l")
}
set.seed(6909)
#write out the Epanechnikov kernel function
kernel_epan <- function(x) {
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
return(val)
}
#write out the Epanechnikov density function
i = 1
h = 1
kern_density <- function(x, h, x_new){
dst_est <- numeric()
for (i in 1:length(x_new)){
dst_est[i] <- mean(kernel_epan((x_new[i]-x)/h))/h
}
dst_est
}
#visualize different bandwidths
x <- rnorm(1000, 0, 1)
x_new <- sort(rnorm(50, 0, 1))
h = c(0.1, 0.5, 1, 2, 3)
for (i in h){
plot(x_new, kern_density(x,i,x_new), ylab = "Density", main = "Kernal density estimation", type = "l")
}
set.seed(6909)
#write out the Epanechnikov kernel function
kernel_epan <- function(x) {
ran <- as.numeric(abs(x) <= 1)
val <- (3/4) * ( 1 - x^2 ) * ran
return(val)
}
#write out the Epanechnikov density function
i = 1
h = 1
kern_density <- function(x, h, x_new){
dst_est <- numeric()
for (i in 1:length(x_new)){
dst_est[i] <- mean(kernel_epan((x_new[i]-x)/h))/h
}
dst_est
}
#visualize different bandwidths
x <- rnorm(1000, 0, 1)
x_new <- sort(rnorm(50, 0, 1))
h = c(0.01, 0.1, 0.5, 1, 2, 3)
for (i in h){
plot(x_new, kern_density(x,i,x_new), ylab = "Density", main = "Kernal density estimation", type = "l")
}
# KKT check function
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /
lambda / nrow(X)
(b == 0) & (abs(s) >= 1)
}
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
y <- iris[,1]
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
fit <- cv.glmnet(X,y,alpha=1)
lambda.1se <- fit$lambda.1se
b <- fit$glmnet.fit$beta[, which(fit$lambda == fit$lambda.1se)]
print(b)
check_kkt(X, y, b, lambda.1se)
}
lasso_reg_with_screening(x,y)
?cv.glmnet
??cv.glmnet
library(glmnet)
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
fit <- cv.glmnet(X,y,alpha=1)
lambda.1se <- fit$lambda.1se
b <- fit$glmnet.fit$beta[, which(fit$lambda == fit$lambda.1se)]
print(b)
check_kkt(X, y, b, lambda.1se)
}
lasso_reg_with_screening(x,y)
library(glmnet)
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1)
#use 1se as the criteria to choose lambda
lambda <- m1$lambda.1se
b <- m1$glmnet.fit$beta[, m1$lambda == lambda]
check_kkt(y, x, b, lambda)
}
lasso_reg_with_screening(x,y)
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
y <- iris[,1]
# KKT check function
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <-
function(X, y, b, lambda)
{
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) /lambda / nrow(X)
(b == 0) & (abs(s) >= 1)
}
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
y <- iris[,1]
library(glmnet)
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1)
#use 1se as the criteria to choose lambda
lambda <- m1$lambda.1se
b <- m1$glmnet.fit$beta[, m1$lambda == lambda]
check_kkt(y, x, b, lambda)
}
lasso_reg_with_screening(x,y)
library(glmnet)
# KKT check function
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <- function(y, X, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
(b == 0) & (abs(s) >= 1)
}
##use iris as dataset
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
y <- iris[,1]
#implement lasso regression
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1)
#use 1se as the criteria to choose lambda
lambda <- m1$lambda.1se
b <- m1$glmnet.fit$beta[, m1$lambda == lambda]
check_kkt(y, x, b, lambda)
}
lasso_reg_with_screening(x,y)
#We can observe that almost all coefficients get a false result for KKT violation.
library(glmnet)
# KKT check function
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <- function(y, X, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
(b == 0) & (abs(s) >= 1)
}
##use iris as dataset
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
y <- iris[,1]
#implement lasso regression
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1)
#use 1se as the criteria to choose lambda
lambda <- m1$lambda.1se
b <- m1$glmnet.fit$beta[, m1$lambda == lambda]
check_kkt(y, x, b, lambda)
}
lasso_reg_with_screening(x,y)
library(glmnet)
# KKT check function
#Return:
#A logical vector indicating where the KKT conditions have been violated by the variables that are currently zero.
check_kkt <- function(y, X, b, lambda) {
resids <- y - X %*% b
s <- apply(X, 2, function(xj) crossprod(xj, resids)) / lambda / nrow(X)
(b == 0) & (abs(s) >= 1)
}
##use iris as dataset
x <- scale(model.matrix(Sepal.Length ~. -1, iris))
y <- iris[,1]
#implement lasso regression
#Check which variables violate KKT condition
#Return: logical vector indicating where the KKT conditions have been violated
lasso_reg_with_screening <- function(x, y){
m1 <- cv.glmnet(x,y,alpha=1)
#use 1se as the criteria to choose lambda
lambda <- m1$lambda.1se
b <- m1$glmnet.fit$beta[, m1$lambda == lambda]
check_kkt(y, x, b, lambda)
}
lasso_reg_with_screening(x,y)
